-- Updated Aimbot + ESP script with FOV persistence after reset

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Aimy",
   Icon = 0,
   LoadingTitle = "Aimy.",
   LoadingSubtitle = "Made By ccgvb",
   Theme = "Darkblue",
   ToggleUIKeybind = "G",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("Aimbot", "target")

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

local toggleOn = false
local aiming = false
local fovRadius = 50

local teamCheckEnabled = false
local ESPEnabled = false
local ESPColor = Color3.new(1, 0, 0)
local Highlights = {}

-- Create or get persistent ScreenGui for FOV
local screenGui = localPlayer:WaitForChild("PlayerGui"):FindFirstChild("AimbotFOVGui")
if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AimbotFOVGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
end

-- Create or reuse FOV circle
local fovCircle = screenGui:FindFirstChild("FOVCircle")
if not fovCircle then
    fovCircle = Instance.new("Frame")
    fovCircle.Name = "FOVCircle"
    fovCircle.AnchorPoint = Vector2.new(0.5, 0.5)
    fovCircle.BackgroundColor3 = Color3.new(1, 1, 1)
    fovCircle.BackgroundTransparency = 1
    fovCircle.BorderSizePixel = 0
    fovCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
    fovCircle.Position = UDim2.new(0, 0, 0, 0)
    fovCircle.Visible = false
    fovCircle.Parent = screenGui

    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Color = Color3.new(1, 1, 1)
    stroke.Parent = fovCircle

    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(1, 0)
    uicorner.Parent = fovCircle
end

-- Aimbot Functions
local function getClosestTarget()
    local closestDist = math.huge
    local closestChar = nil

    local mousePos = UserInputService:GetMouseLocation()
    local adjustedPos = Vector2.new(mousePos.X, mousePos.Y - 36)
    fovCircle.Position = UDim2.new(0, adjustedPos.X, 0, adjustedPos.Y)

    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("Head") then
            if not teamCheckEnabled or (plr.Team ~= localPlayer.Team) then
                local head = plr.Character.Head
                local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)

                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude

                    if dist < closestDist and dist <= fovRadius then
                        closestDist = dist
                        closestChar = plr.Character
                    end
                end
            end
        end
    end

    return closestChar
end

-- UI Callbacks
Tab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
      toggleOn = Value
      aiming = false
      fovCircle.Visible = Value
   end,
})

Tab:CreateSlider({
   Name = "Aimbot FOV",
   Range = {10, 300},
   Increment = 10,
   Suffix = "px",
   CurrentValue = fovRadius,
   Flag = "Slider1",
   Callback = function(Value)
      fovRadius = Value
      fovCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
   end,
})

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and toggleOn then
        aiming = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = false
    end
end)

RunService.RenderStepped:Connect(function()
    if toggleOn then
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)
    end
end)

RunService.RenderStepped:Connect(function()
    if aiming then
        local target = getClosestTarget()
        if target and target:FindFirstChild("Head") then
            local headPos = target.Head.Position
            local direction = (headPos - camera.CFrame.Position).Unit
            camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
        end
    end
end)

-- ESP Functions
local function updateESP()
    if ESPEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer and player.Character then
                if not teamCheckEnabled or (player.Team ~= localPlayer.Team) then
                    if not Highlights[player] then
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = player.Character
                        highlight.FillColor = ESPColor
                        Highlights[player] = highlight
                    else
                        Highlights[player].FillColor = ESPColor
                    end
                elseif Highlights[player] then
                    Highlights[player]:Destroy()
                    Highlights[player] = nil
                end
            end
        end
    else
        for _, highlight in pairs(Highlights) do
            if highlight then
                highlight:Destroy()
            end
        end
        Highlights = {}
    end
end

-- ESP UI
Tab:CreateToggle({
   Name = "Chams",
   CurrentValue = false,
   Flag = "ToggleESP",
   Callback = function(Value)
       ESPEnabled = Value
       updateESP()
   end,
})

Tab:CreateColorPicker({
    Name = "Chams Color",
    Color = Color3.fromRGB(255, 0, 0),
    Flag = "ESPColorPicker",
    Callback = function(Value)
        ESPColor = Value
        updateESP()
    end
})

Tab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheckToggle",
    Callback = function(value)
        teamCheckEnabled = value
        updateESP()
    end,
})

-- ESP on player joins
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if ESPEnabled and player ~= localPlayer and (not teamCheckEnabled or player.Team ~= localPlayer.Team) then
            local highlight = Instance.new("Highlight")
            highlight.Parent = character
            highlight.FillColor = ESPColor
            Highlights[player] = highlight
        end
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.CharacterAdded:Connect(function(character)
        if ESPEnabled and player ~= localPlayer and (not teamCheckEnabled or player.Team ~= localPlayer.Team) then
            local highlight = Instance.new("Highlight")
            highlight.Parent = character
            highlight.FillColor = ESPColor
            Highlights[player] = highlight
        end
    end)
end
